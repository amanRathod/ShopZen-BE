// enable the "uuid-ossp" extension to use the uuid_generate_v4() function to generate UUID values
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

// Product Category table
-- CREATE TABLE IF NOT EXISTS product_category (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  category_name VARCHAR(255)
);

// Product table
-- CREATE TABLE IF NOT EXISTS product (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  sku VARCHAR(255),
  name VARCHAR(255),
  description VARCHAR(255),
  unit_price NUMERIC(13,2),
  image_url VARCHAR(255),
  active BOOLEAN DEFAULT TRUE,
  units_in_stock INTEGER,
  date_created TIMESTAMP(6),
  last_updated TIMESTAMP(6),
  category_id UUID NOT NULL REFERENCES product_category(id)
);

// create category as enum type
-- CREATE TYPE category AS ENUM ('BOOKS', 'ELECTRONICS', 'CLOTHING', 'HOME_APPLIANCES');

-- if PostgreSQL database is not able to automatically convert the values in the category_name column to the Category enum type then,

-- 1. Add a new temporary column to the product_category table with the Category enum type:
-- ALTER TABLE product_category ADD COLUMN category_temp Category;

-- 2. Update the category_temp column with the values from the category_name column
-- UPDATE product_category SET category_temp = category_name::Category;

-- 3.Drop the category_name column
-- ALTER TABLE product_category DROP COLUMN category_name;

-- 4.Rename the category_temp column to category
-- ALTER TABLE product_category RENAME COLUMN category_temp TO category_name;

// create table Country
-- CREATE TABLE country (
--   id smallint NOT NULL,
--   code varchar(2),
--   name varchar(255),
--   PRIMARY KEY (id)
-- );

// create table "State"
-- CREATE TABLE state (
--   id SERIAL PRIMARY KEY,
--   name varchar(255),
--   country_id smallint NOT NULL,
--   CONSTRAINT fk_country FOREIGN KEY (country_id) REFERENCES country (id)
-- );

// create table "Address"
-- CREATE TABLE address (
--   id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
--   city varchar(255),
--   country varchar(255),
--   state varchar(255),
--   street varchar(255),
--   zip_code varchar(255)
-- );

// create table "Customer"
-- CREATE TABLE customer (
--   id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
--   first_name VARCHAR(255),
--   last_name VARCHAR(255),
--   email VARCHAR(255)
-- );

// create table "Order"
-- CREATE TABLE orders (
--   id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
--   order_tracking_number varchar(255) DEFAULT NULL,
--   total_price numeric(19,2) DEFAULT NULL,
--   total_quantity int DEFAULT NULL,
--   billing_address_id UUID DEFAULT NULL,
--   customer_id UUID DEFAULT NULL,
--   shipping_address_id UUID DEFAULT NULL,
--   status varchar(128) DEFAULT NULL,
--   date_created timestamp(6) DEFAULT NULL,
--   last_updated timestamp(6) DEFAULT NULL,
--   UNIQUE (billing_address_id),
--   UNIQUE (shipping_address_id),
--   CONSTRAINT FK_customer_id FOREIGN KEY (customer_id) REFERENCES customer (id),
--   CONSTRAINT FK_billing_address_id FOREIGN KEY (billing_address_id) REFERENCES address (id),
--   CONSTRAINT FK_shipping_address_id FOREIGN KEY (shipping_address_id) REFERENCES address (id)
-- );

// create table "Order Item"
-- CREATE TABLE order_item (
--   id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
--   image_url varchar(255),
--   quantity integer,
--   unit_price numeric(19,2),
--   order_id UUID,
--   product_id UUID,
--   CONSTRAINT fk_order_item_order_id FOREIGN KEY (order_id) REFERENCES orders(id),
--   CONSTRAINT fk_order_item_product_id FOREIGN KEY (product_id) REFERENCES product(id)
-- );
